
Heyo.

If it’s even possible, I would like to apply for a job that doesn’t quite exist.

I stumbled upon Proletariat because it was mentioned by the Haxe community’s site. I was really just curious to see if any Haxe-level (on top of C/C++ libs) game / interactive art jobs even existed. Anyway, perhaps me and the engineers share some similar values to choose Haxe: the language itself, the small community, the zen-like work-flow, the drawing libraries, the creative freedom that comes from low-level access coupled with a high-level language?

I checked the jobs currently available, but they seem to be departmentalized as is the norm of game companies beyond a small size, thus making it difficult for generalist personalities like me to join without a terrible gut feeling of anti-freedom. On top of that, the positions that I might be able to fit (game community support, game engineer, qa engineer, qa tester) all don’t have the option to work remotely. I’m stuck in Thailand at the moment, normally live in Taiwan, and try visit my family in Virginia, or meet half-way in India. If I were to go to Boston now, my bones would freeze!

It’s been about a decade since I’ve done any programming (save an AR contract and messing with my friend’s Unity indie art games), and even longer since doing un-managed memory stuff (C/C++/Obj-C). On the other side, I’ve now got many years of true community support: supporting living communities in the less civilized world: neighbors, communes, artists, indigenous peoples, farmers, everyone. I’m not sure how those experiences will exactly help me with this job, but I’m certain they will.

I haven’t played many games for a decade either, but luckily my childhood makes up for the rest of my life. I haven’t figured out exactly what I like about Spellbreak... Maybe it’s because it’s massive-multi-player; That already adds a tiny bit of sense of community; Maybe because it seems quite community-driven, which is rare in competitive games, and especially fighting games, wherein often the players are divorced from development and have no voice nor the ability to progress the game; Maybe because it’s a fighting game at it’s core. I have a long history with competitive games (Melee), and hope to foster my own fighting-game-making online community once I get back in the computer groove; Maybe because it’s very much a play-ground game, like the old Half-life mods; I love play-ground games. Maybe because it’s C/C++, which feeds my recent desire to get into lower-level systems programming, especially related to graphics. Maybe because it’s one big game, which would allow me time to slowly grasp the whole, somewhat understand everything, become comfortable with the entire product, and be able to jump around and tinker away for a long period of time. My first job was on a big product, and that was better than any quick contract work later in life. Surely these are some factors to the mystery... Oh!: and I’m fond of the cartoony graphics. :)

I’m very much a generalist. A person that likes to understand everything, see the big picture, figure out what most important, catch ‘low-hanging’ fruit, just do what’s necessary, keep things clean, and shepard things along it’s own way. If you think there’s a space for such a lone wolf, this might work out!

If I were forced to cleave myself to fit into a specialized singular job role, it would absolutely be community support. That just sounds the most fun. It would keep me in the happiest and healthiest state of mind, allowing me to work long-term (I cannot do programming work for long periods of time). I find joy in supporting people, supporting communities, finding and using well-designed simple tools, designing and creating making my own little tools, making and philosophizing about competitive games, writing, and talking! I spent much of my life doing just those things in deeply different analog ways, from local game communities to local art communities in cities to vegan communes in rural Asia to community spaces in tribal Asia. This job sounds like a digital version of that sort of work: being able to keep the support ticket software, bug tracking software, wikis, discourse(?), discord, and perhaps even bits of the core gameplay scripting, all clean and organized would come naturally to me, just as keeping physical community spaces clean have in my past, all-the-while being a core participant of the community. 

Similarly, being able to swiftly go from listening to the community’s constructive criticisms to designing and implementing a solution also comes natural to me, as it satisfies an earlier-mentioned desire: to do what’s necessary (to ensure that the game just effing works!). Writing better bug info, debugging, adding more error message cases, and perhaps trying to fix small things, though listed under QA, I hope can possible from a support role. To me, hard-separating all of those roles (support, qa, designer, programmer) can at times be more troublesome as it just adds extraneous communication and reduces natural autonomous work. A simple feedback-loop-based design-and-work-flow between what the players want (support, qa) to giving what they want (design, engineer) is surely what I’d really miss in such a big team. I know it won’t ever be as simple as making small games with a few friends, but I hope that it never becomes such a gigantic mess that it blocks the big picture and autonomous wills from the minds of the workers.

Though I currently have some interest in game engineering and thus the game engineer job, unfortunately, SpellBreak uses a proprietary solution (the Unreal Engine), and so part of the fun (to me), seeing and editing the engine, is lost. I’m not suggesting that everyone should go and write their own 3D game engines(! see ‘the three million line problem’). 3D and multi-player at this scale might just be too intimidating and too large for little me anyway. The most I’ve ever networked were locally networked iOS devices! I also wouldn’t want to be the one taking the fun part—gameplay scripting— away from those hard-working engineers :). Besides, now that I’m imagining this better, it might just be even more fun (to me) to become more skilled with text (reg ex, parsing) and build up a good set of simple text-based content tools to aid the community support job (statically-generated blog and documentation, mediawiki parse-down extensions, discourse for forums, discord bot?, making sense of all of that info, and perhaps somehow combining these things in a visual way). Yeah... Now that I’ve imagined this, as far as game-programming goes, it’s better to leave that to my spare time, so that I have the choice to choose what I enjoy (barebones non-paradigm engines atop Kha and MonoGame, Jon Blow’s new stuff, old-school SDL2).

My second job was “QA & release engineer” in a company of 60’ish. That... sort of fit my whole generalist desire...: of getting the big picture, of understanding everyone’s job, of making sure shit worked, of being the main support to the entire engineering department, of literally being the work-flow... but... eh. It wasn’t exactly freedom-inducing / autonomous either since everyone (and every ‘push’) depended on me. Besides, that job was just too awful to compare (every last push was near the end of the work shift). Anyway, I just can’t imagine doing that job remotely (unless everyone else worked remotely). The support job still just sounds better.

Well then, game community support it is! But, there’s no remote option, so I’ll still just e-mail instead of actually applying to it. The “Player Support Assistant Manager - Content & Quality“ for SpellBreak job, now looking at it, is surprisingly fitting, mixing a few things: maintaining written content (support FAQs db, wiki, sub-Reddit?...), voicing players’ criticisms and problems to the right places, solving problems myself (in order to reduce support tickets).... Since the job mostly deals with written content, it seems a perfect fit for a remote worker, but I’m afraid the “Player Support Organization” is a physical department and not a remote one... And part of the job seems to be about training others. If that can be done remotely, then sure. I prefer working at night, and living here fits the time difference! Thankfully writing a “Training Curriculum” is part of the job to reduce just that. Document everything and make better solutions! That doesn’t sound too bad for such a specialized role.

Lastly, I must say, I’m only really interested in SpellBreak. I hope I can just become a master of that single product. ...The past Facebook-like Zynga game... uh... just hurts any gamers soul. :( ...But at least the company can feed themselves and make—no, made(!) better things?

Welp, anyway, now you know I can talk, write, and narrow down decisions! Haha. Just e-mail me back if there’s any interest. I’m in Thailand at the moment, and nobody really knows what the government will do with all of us stuck here... but I’ve been living here since March thus far... Things will change soon, but thankfully this season’s weather is finally livable!

I don’t have a clue about Boston, but at least they once kindly allowed my friends and I to showcase a few games at the BFIG long long ago! :)


—
extras:
Actually, the reason I used Haxe a decade ago was not only did I love and find freedom in Flash’s simple non-game-editor environment (AS3, FlashDevelop, AIR), but because I was simply trying to find a good 2D drawing library that used good native methods underneath, especially good OpenGL ES for iOS, which were very slow at the time. This problem haunted me at the time because all of the small indie game engines were all sprite-based, and all of my ideas involved drawing stuff (vertex graphics?).

Recently I was looking back at the history of software, and pretty much agree with Jonathan Blow and Casey Muratori: that the situation sucks, 

and is simply just less humane. It’s like trying to fit people into an object-oriented paradigm or an industrial factory: it might scale and be easier to industrialize, both the work and the company of people, but surely there’s some way to allow people to be more autonomous... A simple and clear communication-flow and work-flow between what the players want (support, qa) to making it happen (design, engineer) is what I’d really miss in a big team. It surely won’t ever be as simple as just me making games alone or with my friends, but I hope that it never becomes such a gigantic mess that it blocks the big picture and the freedom to act on one’s own will from the company’s minds.